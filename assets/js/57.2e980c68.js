(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{239:function(e,v,a){"use strict";a.r(v);var _=a(3),t=Object(_.a)({},(function(){var e=this,v=e.$createElement,a=e._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[e._v("#")]),e._v(" Map")]),e._v(" "),a("p",[e._v("Map 对象存储键值对，并且可以记录原始的键值对的插入顺序，任何值都可以作为 Map 对象的键。")]),e._v(" "),a("h2",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[e._v("#")]),e._v(" 构造函数")]),e._v(" "),a("p",[e._v("通过"),a("code",[e._v("new Map()")]),e._v("创建一个 Map 对象。")]),e._v(" "),a("h2",{attrs:{id:"实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[e._v("#")]),e._v(" 实例属性")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("size")]),e._v("：键值对数量")])]),e._v(" "),a("h2",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("clear()")]),e._v("：清除所有键值对")]),e._v(" "),a("li",[a("code",[e._v("delete(key)")]),e._v("：删除 key 对应的键值对，如果 key 不存在返回"),a("code",[e._v("false")]),e._v("，删除成功返回"),a("code",[e._v("true")])]),e._v(" "),a("li",[a("code",[e._v("entries()")]),e._v("：迭代器对象")]),e._v(" "),a("li",[a("code",[e._v("forEach(callback)")]),e._v("：每一对键值对按照插入顺序执行一遍回调函数")]),e._v(" "),a("li",[a("code",[e._v("get(key)")]),e._v("：获取 key 对应的值，没有返回"),a("code",[e._v("undefined")])]),e._v(" "),a("li",[a("code",[e._v("has(key)")]),e._v("：是否由 key 键")]),e._v(" "),a("li",[a("code",[e._v("keys()")]),e._v("：返回由所有 key 组成的迭代器对象")]),e._v(" "),a("li",[a("code",[e._v("set(key, value)")]),e._v("：放入一组键值对，返回最新的 map")]),e._v(" "),a("li",[a("code",[e._v("values()")]),e._v("：返回由所有 value 组成的迭代器对象")])])])}),[],!1,null,null,null);v.default=t.exports}}]);
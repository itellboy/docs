(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{240:function(e,t,v){"use strict";v.r(t);var _=v(3),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"set"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" Set")]),e._v(" "),v("p",[e._v("Set 对象存储一组任意值，值不可重复")]),e._v(" "),v("h2",{attrs:{id:"构造函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[e._v("#")]),e._v(" 构造函数")]),e._v(" "),v("p",[e._v("可以通过"),v("code",[e._v("new Set()")]),e._v("创建一个 Set 对象")]),e._v(" "),v("h2",{attrs:{id:"实例属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[e._v("#")]),e._v(" 实例属性")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("size")]),e._v("：值的个数")])]),e._v(" "),v("h2",{attrs:{id:"实例方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("add(value)")]),e._v("：增加一个值")]),e._v(" "),v("li",[v("code",[e._v("clear()")]),e._v("：清除所有键值对")]),e._v(" "),v("li",[v("code",[e._v("delete(key)")]),e._v("：删除 key 对应的键值对，如果 key 不存在返回"),v("code",[e._v("false")]),e._v("，删除成功返回"),v("code",[e._v("true")])]),e._v(" "),v("li",[v("code",[e._v("entries()")]),e._v("：迭代器对象")]),e._v(" "),v("li",[v("code",[e._v("forEach(callback)")]),e._v("：每一对值按照插入顺序执行一遍回调函数")]),e._v(" "),v("li",[v("code",[e._v("has(key)")]),e._v("：是否由 key 键")]),e._v(" "),v("li",[v("code",[e._v("keys()")]),e._v("：返回由所有值成的迭代器对象")]),e._v(" "),v("li",[v("code",[e._v("values()")]),e._v("：返回由所有值组成的迭代器对象")])])])}),[],!1,null,null,null);t.default=a.exports}}]);
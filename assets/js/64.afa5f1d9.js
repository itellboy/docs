(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{246:function(e,_,v){"use strict";v.r(_);var t=v(3),a=Object(t.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"number"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[e._v("#")]),e._v(" Number")]),e._v(" "),v("p",[e._v("Number 是数值的包装对象，可以通过"),v("code",[e._v("Number()")]),e._v("构造函数创建。")]),e._v(" "),v("p",[e._v("在 JavaScript 里面，Number 类型为"),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Floating-point_arithmetic",target:"_blank",rel:"noopener noreferrer"}},[e._v("双精度 64 位类型"),v("OutboundLink")],1),e._v("，没有整数类型。")]),e._v(" "),v("p",[e._v("JavaScript 可以使用 BigInt 处理大整形数据。")]),e._v(" "),v("h2",{attrs:{id:"静态变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#静态变量"}},[e._v("#")]),e._v(" 静态变量")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("Number.EPSILOG")]),e._v("：1 与 大于 1 的最小浮点数之差")])]),e._v(" "),v("p",[e._v("可理解为 JavaScript 数值可表示的最小精度。")]),e._v(" "),v("p",[e._v("如果两个数值之差小于该常量，则可认为两者是相等的。")]),e._v(" "),v("p",[e._v("数值大小为"),v("code",[e._v("Math.pow(2, -52)")]),e._v("。")]),e._v(" "),v("div",{staticClass:"language-javascript line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[e._v("Number"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),v("span",{pre:!0,attrs:{class:"token constant"}},[e._v("EPSILOG")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.220446049250313e-16")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br")])]),v("ul",[v("li",[v("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v("：最大安全整数。")]),e._v(" "),v("li",[v("code",[e._v("Number.MIN_SAFE_INTEGER")]),e._v("：最小安全整数。")]),e._v(" "),v("li",[v("code",[e._v("Number.MAX_VALUE")]),e._v("：最大数值")]),e._v(" "),v("li",[v("code",[e._v("Number.MIN_VALUE")]),e._v("：最小数值")]),e._v(" "),v("li",[v("code",[e._v("Number.NaN")]),e._v("：同"),v("code",[e._v("NaN")])]),e._v(" "),v("li",[v("code",[e._v("Number.NEGATIVE_INFINITY")]),e._v("：负无穷大")]),e._v(" "),v("li",[v("code",[e._v("Number.POSITIVE_INFINITY")]),e._v("：正无穷大")]),e._v(" "),v("li",[v("code",[e._v("Number.prototype")]),e._v("：数值对象的原型对象")])]),e._v(" "),v("h2",{attrs:{id:"静态方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("Number.isNaN()")]),e._v("：判断值是否为"),v("code",[e._v("NaN")]),e._v("，与全局变量"),v("code",[e._v("isNaN()")]),e._v("实现有差异")]),e._v(" "),v("li",[v("code",[e._v("Number.isFinite()")]),e._v("：判断值是否是无穷大或者无穷小")]),e._v(" "),v("li",[v("code",[e._v("Number.isInteger()")]),e._v("：判断值是否为整数")]),e._v(" "),v("li",[v("code",[e._v("Number.isSafeInteger()")]),e._v("：判断值是否是一个安全的整数，介于"),v("code",[e._v("Number.MIN_SAFE_INTEGER")]),e._v("和"),v("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v("之间")]),e._v(" "),v("li",[v("code",[e._v("Number.parseFloat(string)")]),e._v("：同"),v("code",[e._v("parseFloat()")])]),e._v(" "),v("li",[v("code",[e._v("Number.parseInt(string[, radix])")]),e._v("：同"),v("code",[e._v("parseInt()")])])]),e._v(" "),v("h2",{attrs:{id:"实例方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("toExponential(int)")]),e._v("：返回数值的指数表达式，int 的取值范围为 [0, 20]")]),e._v(" "),v("li",[v("code",[e._v("toFixed(n)")]),e._v("：返回保留 n 位小数的字符串")]),e._v(" "),v("li",[v("code",[e._v("toLocalString()")]),e._v("：")]),e._v(" "),v("li",[v("code",[e._v("toString()")]),e._v("：")]),e._v(" "),v("li",[v("code",[e._v("toPrecision(n)")]),e._v("：返回保留 n 位有效数字的字符串")]),e._v(" "),v("li",[v("code",[e._v("valueOf()")]),e._v("：返回数值")])])])}),[],!1,null,null,null);_.default=a.exports}}]);